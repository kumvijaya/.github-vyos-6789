
name: Reusable VyOS image build

on:
  workflow_call:
    inputs:
      release_version:
        required: true
        type: string
        default: ''
      release_flavor:
        required: false
        type: string
        default: 'generic'
      release_arch:
        required: false
        type: string
        default: 'amd64'
    secrets:
      token:
        required: false
      minisign_public_key:
        required: true
      minisign_private_key:
        required: true
      minisign_password:
        required: true

run-name: Build ${{ inputs.release_arch }} image for ${{ inputs.release_version }} version

env:
  VYOS_MIRROR_APT_KEY: https://packages.vyos.net/vyos_dev_public.key
  STREAM_PUBLISH_REPO: vyos/vyos-workflow-testing
  BUILD_BY: 'autobuild@vyos.net'
  PACKAGE_NAME: vyos-1x-smoketest
  DEBIAN_MIRROR_URL: 'http://deb.debian.org/debian/'
  DEBIAN_SECURITY_MIRROR_URL: 'https://deb.debian.org/debian/'
  VYOS_MIRROR_BASE_URL: 'https://packages.vyos.net/repositories'

jobs:
  prepare-inputs:
    runs-on: ubuntu-latest
    outputs:
      owner: ${{ steps.set_repo.outputs.owner }}
      branch: ${{ steps.set_repo.outputs.branch }}
      vyos_mirror_url: ${{ steps.set_mirror.outputs.vyos_mirror_url }}
      build_version: ${{ steps.set_build_version.outputs.build_version }}
      iso_file_name: ${{ steps.set_iso_file_name.outputs.iso_file_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set vyos-build branch based on version
        id: set_repo
        run: |
          version="${{ inputs.release_version }}"
          if [[ "$version" =~ ^1\.3\..* ]]; then
            echo "owner=vyos" >> $GITHUB_OUTPUT
            echo "branch=equuleus" >> $GITHUB_OUTPUT
          elif [[ "$version" =~ ^1\.4\..* ]]; then
            echo "owner=VyOS-Networks" >> $GITHUB_OUTPUT
            echo "branch=sagitta" >> $GITHUB_OUTPUT
          elif [[ "$version" =~ ^1\.5\..* ]]; then
            echo "owner=vyos" >> $GITHUB_OUTPUT
            echo "branch=circinus" >> $GITHUB_OUTPUT 
          else
            echo "ERROR - Unsupported version number $version" >&2
            exit 1
          fi

      - name: Set vyos mirror url
        id: set_mirror
        run: |
          vyos_mirror_url="${{ env.VYOS_MIRROR_BASE_URL }}/${{ steps.set_repo.outputs.build_branch }}/"
          echo "vyos_mirror_url=$vyos_mirror_url" >> $GITHUB_OUTPUT

      - name: Setup build version
        id: set_build_version
        run: |
          echo "build_version=${{ inputs.release_version }}-${{ steps.set_repo.outputs.build_branch }}-$(date -u +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

      - name: set iso file name
        id: set_iso_file_name
        run: |
          iso_file_name='vyos-${{ steps.set_build_version.outputs.build_version }}-${{ inputs.release_flavor}}-${{ inputs.release_arch }}.iso'
          echo "iso_file_name=$iso_file_name" >> $GITHUB_OUTPUT

  build_iso:
    runs-on: self-hosted
    outputs:
      artifact_id: ${{ steps.upload_iso_artifact.outputs.artifact-id }}
    container:
      image: vyos/vyos-build:${{ needs.prepare-inputs.outputs.branch }}
      options: --workdir /vyos --privileged
    env:
      OWNNER: ${{ needs.prepare-inputs.outputs.owner }}
      BRANCH: ${{ needs.prepare-inputs.outputs.branch }}
      BUILD_VERSION: ${{ needs.prepare-inputs.outputs.build_version }}
      MIRROR_URL: ${{ needs.prepare-inputs.outputs.vyos_mirror_url }}
      ISO_FILE: ${{ needs.prepare-inputs.outputs.iso_file_name }}

    steps:  
    - name: Checkout ${{ env.BRANCH }} source code
      uses: actions/checkout@v4
      with:
        repository: ${{ env.OWNNER }}/vyos-build
        ref: ${{ env.BRANCH }}
        token: ${{ secrets.token }}

    - name: Mark directory as safe
      run: |
        set -eux
        git config --global --add safe.directory '*'

    - name: Install minisign
      run: |
        sudo apt-get install -y minisign

    - name: Build ISO
      run: |
        set -eux
        git remote -v
        sudo --preserve-env ./build-vyos-image \
          --build-by ${{ env.BUILD_BY }} \
          --build-type release \
          --custom-package ${{ env.PACKAGE_NAME }} \
          --version ${{ env.BUILD_VERSION }} \
          --vyos-mirror ${{ env.MIRROR_URL }} \
          ${{ inputs.release_flavor}}

    - name: Sign generic ISO image
      shell: bash
      run: |
          echo "${{ secrets.minisign_private_key }}" > /tmp/minisign.key
          echo "${{ secrets.minisign_public_key }}" > /tmp/minisign.pub
          mv build/${{ env.ISO_FILE }} .
          echo "${{ secrets.minisign_password }}" | /usr/bin/minisign -s /tmp/minisign.key -Sm ${{ env.ISO_FILE }}
          /usr/bin/minisign -Vm ${{ env.ISO_FILE }} -x ${{ env.ISO_FILE }}.minisig -p /tmp/minisign.pub
          rm /tmp/minisign.key /tmp/minisign.pub && ls -la

    - name: "Uploading artifacts: ISO image to GitHub"
      id: upload_iso_artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ISO_FILE }}
        path: ./${{ env.ISO_FILE }}
        retention-days: 10
        if-no-files-found: error
      
    - name: "Uploading minisign file to GitHub"
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ISO_FILE }}.minisig
        path: ${{ env.ISO_FILE }}.minisig
        retention-days: 10
        if-no-files-found: error